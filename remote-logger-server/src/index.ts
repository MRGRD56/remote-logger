import * as express from 'express';
import * as cors from 'cors';
import {isAutoGeneratedToken, RemoteLog, RemoteLoggerServer, RemoteLoggerServerParams} from "./types";
import handlePostLog from "./controllers/handlePostLog";
import handleGetCheckRemoteLogger from "./controllers/handleGetCheckRemoteLogger";
import checkAccessToken from "./middleware/checkAccessToken";
import generateAccessToken from "./utils/generateAccessToken";
import {Subject} from "rxjs";

const remoteLoggerServer = (port: number, params?: RemoteLoggerServerParams): RemoteLoggerServer => {
    const accessToken = isAutoGeneratedToken(params?.accessToken) ? generateAccessToken() : params?.accessToken;
    if (isAutoGeneratedToken(params?.accessToken) && accessToken) {
        params?.autoGeneratedTokenCallback?.(accessToken);
    }

    const logSubject = new Subject<RemoteLog>();

    const app = express();
    app.use(express.json());
    app.use(cors());
    app.use(checkAccessToken(accessToken));

    app.get('/');
    app.get('/check_remote_logger', handleGetCheckRemoteLogger);
    app.post('/log', handlePostLog(logSubject));

    if (params?.hostname !== undefined) {
        app.listen(port, params.hostname, params?.serverStartCallback);
    } else {
        app.listen(port, params?.serverStartCallback);
    }

    return {
        listen: (callback) => {
            logSubject.subscribe(value => {
                callback(value);
            });
        }
    };
};

export default remoteLoggerServer;